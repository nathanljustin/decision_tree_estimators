{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from odtlearn.FairTree import FairTreeClassifier\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fair Optimal Classification Trees\n",
    "This document aims to demonstrates how to use the `FairTreeClassifier` to fit fair optimal classification trees. We begin with the standard use case, walking through parameter choices and method details, and then provide a small example on a real-world data set.\n",
    "\n",
    "## `FairTreeClassifier`: the basics\n",
    "\n",
    "FairTree is an extension of the StrongTree MIO formulation for learning optimal *balanced* classification trees of a given depth that incorporates fairness constraints.\n",
    "\n",
    "![](../_static/img/fairOCT.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Toy Example 1: enforcing fairness constraints in the MIO formulation\n",
    "\n",
    "First we generate the data for our example. The diagram within the code block shows the expected structure of the fitted optimal decision tree.\n",
    "**NEED EXPLANATION OF DIAGRAM HERE**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "        X2                    |\n",
    "        |                     |\n",
    "        1    5W: 4(-) 1(+)    |     2W: 1(-) 1(+)\n",
    "        |    2B: 2(-)         |     5B: 3(-) 2(+)\n",
    "        |                     |    \n",
    "        |                     |   \n",
    "        |---------------------|------------------------\n",
    "        |                     |\n",
    "        0    4W: 3(-) 1(+)    |         3W: 1(-) 2(+) \n",
    "        |    1B:      1(+)    |         6B: 1(-) 5(+)\n",
    "        |                     | \n",
    "        |___________0_________|__________1_____________X1\n",
    "'''\n",
    "\n",
    "\n",
    "X = np.array([[0,0],[0,0],[0,0],[0,0],[0,0],\n",
    "                [1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],[1,0],\n",
    "                [1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],\n",
    "                [0,1],[0,1],[0,1],[0,1],[0,1],[0,1],[0,1]])\n",
    "P = np.array([0,0,0,0,1,\n",
    "                0,0,0,1,1,1,1,1,1,\n",
    "                0,0,1,1,1,1,1,\n",
    "                0,0,0,0,0,1,1])\n",
    "y = np.array([0,0,0,1,1,\n",
    "                0,1,1,0,1,1,1,1,1,\n",
    "                0,1,0,0,0,1,1,\n",
    "                0,0,0,0,1,0,0])\n",
    "P = P.reshape(-1,1)\n",
    "\n",
    "l = X[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's investigate the following scenarios\n",
    "   \n",
    "- We evaluate SP when we don't enforce any fairness constraint\n",
    "- We evaluate SP when we add SP constraint with fairbound 0.1\n",
    "- We evaluate PE when we don't enforce any fairness constraint\n",
    "- We evaluate PE when we add PE constraint with fairbound 0.04\n",
    "\n",
    "We add a helper function for displaying the results from each scenario"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_FairTree_metrics(X, y, P, l, f, b):\n",
    "    fcl = FairTreeClassifier(\n",
    "        positive_class=1,\n",
    "        depth=2,\n",
    "        _lambda=0,\n",
    "        time_limit=100,\n",
    "        fairness_type=f,\n",
    "        fairness_bound=b,\n",
    "        num_threads=None,\n",
    "        obj_mode = 'acc'\n",
    "    )   \n",
    "    fcl.fit(X, y, P, l, verbose = False)\n",
    "    \n",
    "    return fcl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating statistical parity without fairness constraint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Set parameter Username\n",
      "Academic license - for non-commercial use only - expires 2023-02-05\n",
      "\n",
      "    (p,y)  P(Y=y|P=p)\n",
      "0  (0, 0)    0.785714\n",
      "1  (1, 0)    0.571429\n",
      "2  (0, 1)    0.214286\n",
      "3  (1, 1)    0.428571\n",
      " -------------------------\n",
      "#########node  1\n",
      "branch on X_0\n",
      "#########node  2\n",
      "branch on X_0\n",
      "#########node  3\n",
      "branch on X_1\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 0\n",
      "#########node  6\n",
      "leaf 1\n",
      "#########node  7\n",
      "leaf 0\n",
      "The in-sample acc is 0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "fcl_wo_SP  = test_FairTree_metrics(X, y, P, l, 'SP', 1)\n",
    "df_wo_SP = pd.DataFrame(fcl_wo_SP.get_SP(P, fcl_wo_SP.predict(X)).items(), columns=['(p,y)', 'P(Y=y|P=p)'])\n",
    "print(f'\\n{df_wo_SP}\\n -------------------------')\n",
    "fcl_wo_SP.print_tree()\n",
    "print('The in-sample acc is {}'.format(np.sum(fcl_wo_SP.predict(X)==y)/y.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0.8333333333333334, 'X_0'),\n",
       " Text(0.25, 0.5, 'X_0'),\n",
       " Text(0.125, 0.16666666666666666, '0'),\n",
       " Text(0.375, 0.16666666666666666, '0'),\n",
       " Text(0.75, 0.5, 'X_1'),\n",
       " Text(0.625, 0.16666666666666666, '1'),\n",
       " Text(0.875, 0.16666666666666666, '0')]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fcl_wo_SP.plot_tree()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating statistical parity with fairbound 0.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "    (p,y)  P(Y=y|P=p)\n",
      "0  (0, 1)         0.5\n",
      "1  (1, 1)         0.5\n",
      "2  (0, 0)         0.5\n",
      "3  (1, 0)         0.5\n",
      " -------------------------\n",
      "#########node  1\n",
      "branch on X_1\n",
      "#########node  2\n",
      "branch on X_0\n",
      "#########node  3\n",
      "branch on X_1\n",
      "#########node  4\n",
      "leaf 1\n",
      "#########node  5\n",
      "leaf 1\n",
      "#########node  6\n",
      "leaf 0\n",
      "#########node  7\n",
      "leaf 0\n",
      "The in-sample acc is 0.6785714285714286\n"
     ]
    }
   ],
   "source": [
    "fcl_w_SP = test_FairTree_metrics(X, y, P, l, 'SP', 0.1)\n",
    "df_w_SP = pd.DataFrame(fcl_w_SP.get_SP(P, fcl_w_SP.predict(X)).items(), columns=['(p,y)', 'P(Y=y|P=p)'])\n",
    "print(f'\\n{df_w_SP}\\n -------------------------')\n",
    "fcl_w_SP.print_tree()\n",
    "print('The in-sample acc is {}'.format(np.sum(fcl_w_SP.predict(X)==y)/y.shape[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0.8333333333333334, 'X_1'),\n",
       " Text(0.25, 0.5, 'X_0'),\n",
       " Text(0.125, 0.16666666666666666, '1'),\n",
       " Text(0.375, 0.16666666666666666, '1'),\n",
       " Text(0.75, 0.5, 'X_1'),\n",
       " Text(0.625, 0.16666666666666666, '0'),\n",
       " Text(0.875, 0.16666666666666666, '0')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fcl_w_SP.plot_tree()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating PE without fairness constraint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  (p, t, t_pred)  P(Y_pred=t_pred|P=p, Y=t)\n",
      "0      (0, 0, 0)                   0.888889\n",
      "1      (1, 0, 0)                   0.833333\n",
      "2      (0, 0, 1)                   0.111111\n",
      "3      (1, 0, 1)                   0.166667\n",
      "4      (0, 1, 0)                   0.600000\n",
      "5      (1, 1, 0)                   0.375000\n",
      "6      (0, 1, 1)                   0.400000\n",
      "7      (1, 1, 1)                   0.625000\n",
      " -------------------------\n",
      "#########node  1\n",
      "branch on X_1\n",
      "#########node  2\n",
      "branch on X_0\n",
      "#########node  3\n",
      "branch on X_0\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 1\n",
      "#########node  6\n",
      "leaf 0\n",
      "#########node  7\n",
      "leaf 0\n",
      "The in-sample acc is 0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "fcl_wo_PE  = test_FairTree_metrics(X, y, P, l, 'PE', 1)\n",
    "df_wo_PE = pd.DataFrame(fcl_wo_PE.get_EqOdds(P, y, fcl_wo_PE.predict(X)).items(), columns=['(p, t, t_pred)', 'P(Y_pred=t_pred|P=p, Y=t)'])\n",
    "print(f'\\n{df_wo_PE}\\n -------------------------')\n",
    "fcl_wo_PE.print_tree()\n",
    "print('The in-sample acc is {}'.format(np.sum(fcl_wo_PE.predict(X)==y)/y.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0.8333333333333334, 'X_1'),\n",
       " Text(0.25, 0.5, 'X_0'),\n",
       " Text(0.125, 0.16666666666666666, '0'),\n",
       " Text(0.375, 0.16666666666666666, '1'),\n",
       " Text(0.75, 0.5, 'X_0'),\n",
       " Text(0.625, 0.16666666666666666, '0'),\n",
       " Text(0.875, 0.16666666666666666, '0')]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fcl_wo_PE.plot_tree()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating PE with fairbound 0.04"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "  (p, t, t_pred)  P(Y_pred=t_pred|P=p, Y=t)\n",
      "0      (0, 0, 0)                        1.0\n",
      "1      (1, 0, 0)                        1.0\n",
      "2      (0, 0, 1)                        0.0\n",
      "3      (1, 0, 1)                        0.0\n",
      "4      (0, 1, 0)                        1.0\n",
      "5      (1, 1, 0)                        1.0\n",
      "6      (0, 1, 1)                        0.0\n",
      "7      (1, 1, 1)                        0.0\n",
      " -------------------------\n",
      "#########node  1\n",
      "branch on X_1\n",
      "#########node  2\n",
      "branch on X_1\n",
      "#########node  3\n",
      "branch on X_0\n",
      "#########node  4\n",
      "leaf 0\n",
      "#########node  5\n",
      "leaf 0\n",
      "#########node  6\n",
      "leaf 0\n",
      "#########node  7\n",
      "leaf 0\n",
      "The in-sample acc is 0.5357142857142857\n"
     ]
    }
   ],
   "source": [
    "fcl_w_PE  = test_FairTree_metrics(X, y, P, l, 'PE', 0.04)\n",
    "df_w_PE = pd.DataFrame(fcl_w_PE.get_EqOdds(P, y, fcl_w_PE.predict(X)).items(), columns=['(p, t, t_pred)', 'P(Y_pred=t_pred|P=p, Y=t)'])\n",
    "print(f'\\n{df_w_PE}\\n -------------------------')\n",
    "fcl_w_PE.print_tree()\n",
    "print('The in-sample acc is {}'.format(np.sum(fcl_w_PE.predict(X)==y)/y.shape[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0.8333333333333334, 'X_1'),\n",
       " Text(0.25, 0.5, 'X_1'),\n",
       " Text(0.125, 0.16666666666666666, '0'),\n",
       " Text(0.375, 0.16666666666666666, '0'),\n",
       " Text(0.75, 0.5, 'X_0'),\n",
       " Text(0.625, 0.16666666666666666, '0'),\n",
       " Text(0.875, 0.16666666666666666, '0')]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fcl_w_PE.plot_tree()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "Jo, N., Aghaei, S., Benson, J., Gómez, A., & Vayanos, P. (2022). Learning optimal fair classification trees. arXiv preprint arXiv:2201.09932. [[arxiv](https://arxiv.org/pdf/2201.09932.pdf)] "
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "dfaf93ad87348b32221474fd3c800e01f580d105683f49be3d64b58d8896a56c"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
